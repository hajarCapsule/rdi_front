{"ast":null,"code":"var _jsxFileName = \"/home/okajimmy/lacapsule/roomDirectory/roomDirectoryIndi/reactApp/src/component/EventConfirmationPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Modal, Divider, Card, Checkbox, Button } from 'antd';\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Meta\n} = Card;\n\nfunction EventConfirmationPage(props) {\n  _s();\n\n  //Déclaration des ETATS\n  const [detailEvent, setDetailEvent] = useState([]);\n  const [visible, setVisible] = useState(false);\n  const [isComing, setIsComing] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false); // Déclaration de la liste des cases à cocher//\n\n  var checkBoxList = [\"Oui, je viens\", \"Dommage ! Une prochaine fois\"]; //Fonction qui affiche le PopUp et exécute la fonction de confirmation handleSubmit\n\n  const showModal = () => {\n    setIsModalVisible(true);\n    handleSubmit();\n  }; //Fonction qui gère l'affichage du popup\n\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n    setVisible(true);\n  }; //Au chargement de la page récupérer l'événement sélectionnée\n\n\n  useEffect(() => {\n    var eventsFunction = async () => {\n      var rawResponse = await fetch(`/events/${props.match.params._id}`);\n      var response = await rawResponse.json();\n      setDetailEvent(response.event);\n    };\n\n    eventsFunction();\n  }, []);\n\n  function onChange(checkedValues) {\n    setIsComing(false);\n\n    if (checkedValues.target.value === \"Oui, je viens\" && checkedValues.target.checked === true) {\n      setIsComing(true);\n    } else if (checkedValues.target.value === \"Dommage ! Une prochaine fois\" && checkedValues.target.checked === true) {\n      setIsComing(false);\n    }\n  } //ENVOIE DE LA CONFIRMATION AU BACK//\n\n\n  var handleSubmit = async () => {\n    const data = fetch(`/confirmation`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: `isComing=${isComing}&token=${props.token}&eventId=${props.match.params._id}`\n    });\n  };\n\n  if (visible) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: 40\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '65%',\n          justifyContent: 'center'\n        },\n        cover: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Caroussel\",\n          src: detailEvent.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(Meta, {\n          title: detailEvent.nameEvents,\n          description: detailEvent.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), checkBoxList.map((option, i) => {\n          return /*#__PURE__*/_jsxDEV(Checkbox, {\n            style: {\n              marginLeft: '21%',\n              fontSize: 16,\n              fontWeight: 'bold'\n            },\n            onChange: onChange,\n            value: option,\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            backgroundColor: '#AADEC0',\n            borderColor: '#AADEC0',\n            color: 'black',\n            fontWeight: 'bold',\n            marginLeft: '35%',\n            width: '25vh'\n          },\n          type: \"primary\",\n          onClick: showModal,\n          children: \"Confirmer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        title: \"Confirmation\",\n        visible: isModalVisible,\n        onOk: handleOk,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Votre Confirmation a \\xE9t\\xE9 pris en compte !!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EventConfirmationPage, \"PXMGBnXbLIJGNJ5PWK59+CBrNlE=\");\n\n_c = EventConfirmationPage;\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token\n  };\n}\n\nexport default connect(mapStateToProps, null)(EventConfirmationPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"EventConfirmationPage\");","map":{"version":3,"sources":["/home/okajimmy/lacapsule/roomDirectory/roomDirectoryIndi/reactApp/src/component/EventConfirmationPage.js"],"names":["React","useState","useEffect","Modal","Divider","Card","Checkbox","Button","connect","Redirect","NavBar","Meta","EventConfirmationPage","props","detailEvent","setDetailEvent","visible","setVisible","isComing","setIsComing","isModalVisible","setIsModalVisible","checkBoxList","showModal","handleSubmit","handleOk","eventsFunction","rawResponse","fetch","match","params","_id","response","json","event","onChange","checkedValues","target","value","checked","data","method","headers","body","token","display","justifyContent","marginTop","width","image","nameEvents","description","map","option","i","marginLeft","fontSize","fontWeight","backgroundColor","borderColor","color","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Modal, Divider, Card, Checkbox, Button } from 'antd';\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom'\n\nimport NavBar from './NavBar'\n\nconst { Meta } = Card;\n\n\nfunction EventConfirmationPage(props) {\n\n  //Déclaration des ETATS\n  const [detailEvent, setDetailEvent] = useState([])\n  const [visible, setVisible] = useState(false);\n  const [isComing, setIsComing] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  // Déclaration de la liste des cases à cocher//\n  var checkBoxList = [\"Oui, je viens\", \"Dommage ! Une prochaine fois\"];\n\n  //Fonction qui affiche le PopUp et exécute la fonction de confirmation handleSubmit\n  const showModal = () => {\n    setIsModalVisible(true);\n    handleSubmit()\n  };\n\n  //Fonction qui gère l'affichage du popup\n  const handleOk = () => {\n    setIsModalVisible(false);\n    setVisible(true)\n  };\n\n  //Au chargement de la page récupérer l'événement sélectionnée\n  useEffect(() => {\n    var eventsFunction = async () => {\n      var rawResponse = await fetch(`/events/${props.match.params._id}`)\n      var response = await rawResponse.json();\n      setDetailEvent(response.event)\n    }\n    eventsFunction()\n  }, []);\n\n\n\n  function onChange(checkedValues) {\n\n    setIsComing(false)\n    if (checkedValues.target.value === \"Oui, je viens\" && checkedValues.target.checked === true) {\n      setIsComing(true)\n    }\n    else if (checkedValues.target.value === \"Dommage ! Une prochaine fois\" && checkedValues.target.checked === true) {\n      setIsComing(false);\n    }\n  }\n\n  //ENVOIE DE LA CONFIRMATION AU BACK//\n  var handleSubmit = async () => {\n    const data = fetch(`/confirmation`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: `isComing=${isComing}&token=${props.token}&eventId=${props.match.params._id}`,\n    });\n  };\n\n\n\n  if (visible) {\n    return <Redirect to='/home' />\n  }\n\n  return (\n    <>\n      <NavBar />\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\n\n        <Card\n          style={{ width: '65%', justifyContent: 'center' }}\n          cover={\n            <img\n              alt=\"Caroussel\"\n              src={detailEvent.image}\n            />\n          }\n        >\n\n          <Meta\n            title={detailEvent.nameEvents}\n            description={detailEvent.description}\n          />\n          <Divider />\n\n          {checkBoxList.map((option, i) => {\n            return (<Checkbox style={{ marginLeft: '21%', fontSize: 16, fontWeight: 'bold' }} onChange={onChange} value={option}>{option}</Checkbox>)\n          })}\n\n          <Divider />\n\n          <Button style={{ backgroundColor: '#AADEC0', borderColor: '#AADEC0', color: 'black', fontWeight: 'bold', marginLeft: '35%', width: '25vh' }} type=\"primary\" onClick={showModal}>Confirmer</Button>\n\n        </Card>\n        <Modal title=\"Confirmation\" visible={isModalVisible} onOk={handleOk} >\n          <p>Votre Confirmation a été pris en compte !!</p>\n\n        </Modal>\n      </div>\n\n    </>\n\n\n\n  );\n}\n\nfunction mapStateToProps(state) {\n  return { token: state.token };\n}\nexport default connect(mapStateToProps, null)(EventConfirmationPage);\n"]},"metadata":{},"sourceType":"module"}